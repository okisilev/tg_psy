import logging
import asyncio
from flask import Flask, request, jsonify
from telegram import Update, Bot
from telegram.ext import Application, ContextTypes
from telegram.error import TelegramError
from telegram.constants import ParseMode
import threading
import queue
import json
from datetime import datetime

from config import (
    BOT_TOKEN, ADMIN_CHAT_ID, CHANNEL_ID, CHANNEL_USERNAME,
    MESSAGES, SUBSCRIPTION_PRICE, WEBHOOK_URL, DEBUG
)
from database import Database
from prodamus import Prod–∞musAPI
from scheduler import SubscriptionScheduler
from admin_panel import AdminPanel
from channel_manager import ChannelManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO if not DEBUG else logging.DEBUG
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
prodamus = Prod–∞musAPI()
channel_manager = ChannelManager()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
bot_instance = None
application = None
scheduler = None
admin_panel = None

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
update_queue = queue.Queue()

class WebhookBot:
    def __init__(self):
        global bot_instance, application, scheduler, admin_panel
        self.db = db
        self.prodamus = prodamus
        self.channel_manager = channel_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.bot = Bot(token=BOT_TOKEN)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è application –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        scheduler = SubscriptionScheduler(self)
        admin_panel = AdminPanel(self)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
        
        bot_instance = self
        
        logger.info("WebhookBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("admin", self.admin_panel_command))
        
        # Callback handlers
        application.add_handler(CallbackQueryHandler(self.pay_subscription_callback, pattern="^pay_subscription$"))
        application.add_handler(CallbackQueryHandler(self.check_payment_callback, pattern="^check_payment_"))
        application.add_handler(CallbackQueryHandler(self.admin_panel_callback, pattern="^admin_panel$"))
        application.add_handler(CallbackQueryHandler(self.main_menu_callback, pattern="^main_menu$"))
        
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å handlers
        admin_panel.setup_admin_handlers(application)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            user_id=user_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = self.db.get_active_subscription(user_id)
        
        if subscription:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            keyboard = [
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if str(user_id) == ADMIN_CHAT_ID:
                keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ñ–µ–Ω—Å–∫–∏–π –∫–ª—É–±!\n\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription[5][:10]}",
                reply_markup=reply_markup
            )
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if str(user_id) == ADMIN_CHAT_ID:
                keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                MESSAGES['welcome'],
                reply_markup=reply_markup
            )

    async def pay_subscription_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ü—Ä–æ–¥–∞–º—É—Å
        payment = self.prodamus.create_payment(
            user_id=user_id,
            username=query.from_user.username
        )
        
        if payment:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db.add_payment(
                user_id=user_id,
                payment_id=payment['payment_id'],
                amount=payment['amount'],
                status='pending'
            )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment['payment_url'])],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment['payment_id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                f"–°—É–º–º–∞: {SUBSCRIPTION_PRICE / 100} —Ä—É–±.\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –¥–Ω–µ–π\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def check_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        payment_id = query.data.replace("check_payment_", "")
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment_status = self.prodamus.get_payment_status(payment_id)
        
        if payment_status and payment_status.get('status') == 'success':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            await self.activate_subscription(user_id, payment_id, payment_status['amount'])
        else:
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                reply_markup=reply_markup
            )

    async def activate_subscription(self, user_id: int, payment_id: str, amount: int):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            self.db.create_subscription(user_id, payment_id, amount)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            self.db.add_payment(user_id, payment_id, amount, 'success')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
            success = await self.channel_manager.add_user_to_channel(user_id)
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                user_info = self.db.get_user(user_id)
                username = user_info[1] if user_info else None
                await self.channel_manager.send_welcome_message(user_id, username)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = self.db.get_user(user_id)
            subscription = self.db.get_active_subscription(user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = [
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.send_message_to_user(
                user_id,
                MESSAGES['payment_success'],
                reply_markup=reply_markup
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await self.notify_admin_payment(user, subscription)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

    async def send_message_to_user(self, user_id: int, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def notify_admin_payment(self, user, subscription):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            message = MESSAGES['admin_payment_notification'].format(
                username=user[1] or '–ù–µ —É–∫–∞–∑–∞–Ω',
                user_id=user[0],
                amount=subscription[3] / 100,
                expiry_date=subscription[5][:10]
            )
            
            await self.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=message
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    async def admin_panel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) != ADMIN_CHAT_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º", callback_data="admin_report")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_check_subscriptions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ñ–µ–Ω—Å–∫–æ–≥–æ –∫–ª—É–±–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def admin_panel_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) != ADMIN_CHAT_ID:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º", callback_data="admin_report")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_check_subscriptions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ñ–µ–Ω—Å–∫–æ–≥–æ –∫–ª—É–±–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def main_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = self.db.get_active_subscription(user_id)
        
        if subscription:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            keyboard = [
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if str(user_id) == ADMIN_CHAT_ID:
                keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ñ–µ–Ω—Å–∫–∏–π –∫–ª—É–±!\n\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription[5][:10]}",
                reply_markup=reply_markup
            )
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if str(user_id) == ADMIN_CHAT_ID:
                keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                MESSAGES['welcome'],
                reply_markup=reply_markup
            )

    async def admin_report_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
        await admin_panel.admin_report_callback(update, context)

    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        await scheduler.start()

    def setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            asyncio.run(self.bot.delete_webhook())
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            asyncio.run(self.bot.set_webhook(
                url=WEBHOOK_URL,
                allowed_updates=["message", "callback_query"]
            ))
            
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
webhook_bot = None

def process_updates():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            update_data = update_queue.get(timeout=1)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
            update = Update.de_json(update_data, webhook_bot.bot)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            asyncio.run(application.process_update(update))
            
            update_queue.task_done()
            
        except queue.Empty:
            continue
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/webhook/telegram', methods=['POST'])
def telegram_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        update_data = request.get_json()
        
        if not update_data:
            logger.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram webhook")
            return jsonify({'status': 'error', 'message': 'Empty data'}), 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        update_queue.put(update_data)
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_data.get('update_id')}")
        
        return jsonify({'status': 'success'})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/webhook/prodamus', methods=['POST'])
def prodamus_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç –ü—Ä–æ–¥–∞–º—É—Å"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ü—Ä–æ–¥–∞–º—É—Å
        data = request.get_json()
        
        if not data:
            logger.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç webhook")
            return jsonify({'status': 'error', 'message': 'Empty data'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        signature = request.headers.get('X-Signature')
        
        if not signature:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ webhook")
            return jsonify({'status': 'error', 'message': 'Missing signature'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not prodamus.verify_webhook(data, signature):
            logger.error("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            return jsonify({'status': 'error', 'message': 'Invalid signature'}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        order_id = data.get('order_id')
        status = data.get('status')
        amount = data.get('amount')
        
        logger.info(f"Webhook –ø–æ–ª—É—á–µ–Ω: order_id={order_id}, status={status}, amount={amount}")
        
        if status == 'success':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            handle_successful_payment(order_id, amount, data)
        elif status == 'failed':
            # –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª
            handle_failed_payment(order_id, data)
        
        return jsonify({'status': 'success'})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

def handle_successful_payment(order_id: str, amount: int, webhook_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ custom_fields
        custom_fields = webhook_data.get('custom_fields', {})
        user_id = int(custom_fields.get('user_id'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.add_payment(user_id, order_id, amount, 'success')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        db.create_subscription(user_id, order_id, amount)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = db.get_user(user_id)
        subscription = db.get_active_subscription(user_id)
        
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        if webhook_bot:
            asyncio.run(webhook_bot.activate_subscription(user_id, order_id, amount))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")

def handle_failed_payment(order_id: str, webhook_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ custom_fields
        custom_fields = webhook_data.get('custom_fields', {})
        user_id = int(custom_fields.get('user_id'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        amount = webhook_data.get('amount', 0)
        db.add_payment(user_id, order_id, amount, 'failed')
        
        logger.info(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'healthy', 
        'timestamp': datetime.now().isoformat(),
        'bot_status': 'running' if webhook_bot else 'stopped'
    })

@app.route('/status', methods=['GET'])
def status():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        total_users = len(db.get_all_users())
        active_subscriptions = len(db.get_users_with_active_subscriptions())
        
        return jsonify({
            'status': 'running',
            'bot_status': 'running' if webhook_bot else 'stopped',
            'total_users': total_users,
            'active_subscriptions': active_subscriptions,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global webhook_bot
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        webhook_bot = WebhookBot()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        webhook_bot.setup_webhook()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_scheduler():
            asyncio.run(webhook_bot.start_scheduler())
        
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        update_thread = threading.Thread(target=process_updates, daemon=True)
        update_thread.start()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    init_bot()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    from config import FLASK_HOST, FLASK_PORT, DEBUG
    app.run(host=FLASK_HOST, port=FLASK_PORT, debug=DEBUG)
