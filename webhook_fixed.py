from flask import Flask, request, jsonify
import logging
import asyncio
from prodamus import Prod–∞musAPI
from bot import WomenClubBot
from config import FLASK_HOST, FLASK_PORT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
prodamus = Prod–∞musAPI()
bot = WomenClubBot()

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    from datetime import datetime
    return jsonify({
        'service': 'webhook-server',
        'status': 'ok',
        'timestamp': str(datetime.now())
    })

@app.route('/sales/prodamus', methods=['POST'])
def handle_prodamus_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Prodamus"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        if request.is_json:
            data = request.get_json()
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º form-data
            data = request.form.to_dict()
            
            # –ü–∞—Ä—Å–∏–º products –∏–∑ form-data
            products = []
            i = 0
            while f'products[{i}][name]' in data:
                product = {
                    'name': data.get(f'products[{i}][name]', ''),
                    'price': data.get(f'products[{i}][price]', ''),
                    'quantity': data.get(f'products[{i}][quantity]', ''),
                    'sum': data.get(f'products[{i}][sum]', '')
                }
                products.append(product)
                i += 1
            data['products'] = products
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ webhook: {data}")
        logger.info(f"Content-Type: {request.content_type}")
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
        
        if not data:
            logger.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç webhook")
            return jsonify({'status': 'error', 'message': 'Empty data'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (Prodamus –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'Sign')
        signature = request.headers.get('Sign')
        
        # ‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò –û–¢–ö–õ–Æ–ß–ï–ù–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
        logger.info("‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò –û–¢–ö–õ–Æ–ß–ï–ù–ê!")
        logger.info(f"  –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {signature}")
        logger.info(f"  ‚úÖ –ü–æ–¥–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ (Prodamus –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—è)
        order_id = data.get('order_id')
        payment_status = data.get('payment_status')
        amount = int(float(data.get('sum', '0')) * 100)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
        
        logger.info(f"Webhook –ø–æ–ª—É—á–µ–Ω: order_id={order_id}, payment_status={payment_status}, amount={amount}")
        
        if payment_status == 'success':
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...")
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ order_id (—Ñ–æ—Ä–º–∞—Ç: women_club_{user_id}_{timestamp})
                if order_id.startswith('women_club_'):
                    parts = order_id.split('_')
                    if len(parts) >= 3:
                        user_id = int(parts[2])
                        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω user_id: {user_id}")
                        
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                        asyncio.run(bot.activate_subscription(user_id, amount))
                        
                        logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ order_id")
                else:
                    logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç order_id")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        elif payment_status == 'failed':
            logger.info(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª: {order_id}")
        
        return jsonify({'status': 'success', 'message': 'Payment processed'})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

if __name__ == '__main__':
    from datetime import datetime
    print("üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"   - Host: {FLASK_HOST}")
    print(f"   - Port: {FLASK_PORT}")
    print(f"   - URL: http://{FLASK_HOST}:{FLASK_PORT}")
    print("‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò –û–¢–ö–õ–Æ–ß–ï–ù–ê!")
    app.run(host=FLASK_HOST, port=FLASK_PORT, debug=False)