#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Linux —Å–µ—Ä–≤–µ—Ä–µ
"""

import os
import sys
import subprocess
import platform
from datetime import datetime

def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üñ•Ô∏è –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –¢–†–ï–ë–û–í–ê–ù–ò–ô")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
    system = platform.system()
    print(f"   - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}")
    
    if system != "Linux":
        print("   ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –°–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Linux")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    python_version = sys.version_info
    print(f"   - Python –≤–µ—Ä—Å–∏—è: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    if python_version < (3, 8):
        print("   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False
    else:
        print("   ‚úÖ Python –≤–µ—Ä—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
    print("\nüîå –ü–†–û–í–ï–†–ö–ê –ü–û–†–¢–û–í")
    print("-" * 50)
    
    ports_to_check = [80, 443, 5000]
    for port in ports_to_check:
        try:
            result = subprocess.run(['netstat', '-tlnp'], capture_output=True, text=True)
            if f":{port}" in result.stdout:
                print(f"   ‚ö†Ô∏è –ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç")
            else:
                print(f"   ‚úÖ –ü–æ—Ä—Ç {port} —Å–≤–æ–±–æ–¥–µ–Ω")
        except:
            print(f"   ‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç {port}")
    
    return True

def check_python_packages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê PYTHON –ü–ê–ö–ï–¢–û–í")
    print("-" * 50)
    
    required_packages = [
        'flask',
        'requests',
        'python-telegram-bot',
        'sqlite3',
        'hmac',
        'hashlib'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n   üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"   pip install {' '.join(missing_packages)}")
        return False
    
    return True

def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = [
        'BOT_TOKEN',
        'ADMIN_CHAT_ID',
        'CHANNEL_ID',
        'PRODAMUS_SHOP_ID',
        'PRODAMUS_SECRET_KEY',
        'PRODAMUS_WEBHOOK_URL'
    ]
    
    missing_vars = []
    
    for var in required_env_vars:
        if os.getenv(var):
            print(f"   ‚úÖ {var}")
        else:
            print(f"   ‚ùå {var} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n   üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   export {var}=\"your_value_here\"")
        return False
    
    return True

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê")
    print("-" * 50)
    
    required_files = [
        'config.py',
        'bot.py',
        'webhook_http.py',
        'prodamus.py',
        'database.py',
        'channel_manager.py',
        'main.py'
    ]
    
    missing_files = []
    
    for file in required_files:
        if os.path.exists(file):
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n   üìù –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    return True

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    try:
        from database import Database
        db = Database()
        print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        import sqlite3
        conn = sqlite3.connect('women_club.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        expected_tables = ['users', 'subscriptions', 'payments']
        existing_tables = [table[0] for table in tables]
        
        for table in expected_tables:
            if table in existing_tables:
                print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}")
            else:
                print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_webhook_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook"""
    print("\nüîó –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò WEBHOOK")
    print("-" * 50)
    
    try:
        from config import PRODAMUS_WEBHOOK_URL, FLASK_HOST, FLASK_PORT
        
        print(f"   - Webhook URL: {PRODAMUS_WEBHOOK_URL}")
        print(f"   - Flask Host: {FLASK_HOST}")
        print(f"   - Flask Port: {FLASK_PORT}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        if 'yourdomain.com' in PRODAMUS_WEBHOOK_URL:
            print("   ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏—Ç–µ yourdomain.com –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω")
            return False
        
        if not PRODAMUS_WEBHOOK_URL.startswith('http'):
            print("   ‚ùå Webhook URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return False
        
        print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è webhook –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook: {e}")
        return False

def check_linux_specific():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Linux-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("\nüêß –ü–†–û–í–ï–†–ö–ê LINUX –ù–ê–°–¢–†–û–ï–ö")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    try:
        if os.access('.', os.W_OK):
            print("   ‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        else:
            print("   ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
            return False
    except:
        print("   ‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    try:
        result = subprocess.run(['systemctl', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("   ‚úÖ Systemd –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("   ‚ö†Ô∏è Systemd –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        print("   ‚ùì Systemd –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    try:
        result = subprocess.run(['nginx', '-v'], capture_output=True, text=True)
        if result.returncode == 0:
            print("   ‚úÖ Nginx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("   ‚ö†Ô∏è Nginx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except:
        print("   ‚ùì Nginx –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ –ù–ê LINUX")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    checks = [
        ("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", check_system_requirements),
        ("Python –ø–∞–∫–µ—Ç—ã", check_python_packages),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_configuration),
        ("–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞", check_files),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database),
        ("Webhook –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_webhook_config),
        ("Linux –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", check_linux_specific)
    ]
    
    results = []
    
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{check_name}': {e}")
            results.append((check_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
    
    passed = 0
    for check_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {check_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("üìù –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Linux —Å–µ—Ä–≤–µ—Ä–µ:")
        print("   1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Nginx –∏ SSL")
        print("   5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã")
    else:
        print(f"\n‚ö†Ô∏è {len(results) - passed} –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã")
        print("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print("   4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")

if __name__ == "__main__":
    main()
