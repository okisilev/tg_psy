import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode
from database import Database
from config import ADMIN_CHAT_ID

class AdminPanel:
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.db = Database()
    
    async def admin_report_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="report_7days")],
            [InlineKeyboardButton("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="report_30days")],
            [InlineKeyboardButton("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π", callback_data="report_90days")],
            [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="report_custom")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=reply_markup
        )
    
    async def generate_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE, days: int = None, start_date: str = None, end_date: str = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            if days:
                end_date = datetime.now()
                start_date = end_date - timedelta(days=days)
            else:
                start_date = datetime.strptime(start_date, '%Y-%m-%d')
                end_date = datetime.strptime(end_date, '%Y-%m-%d')
            
            start_str = start_date.strftime('%Y-%m-%d')
            end_str = end_date.strftime('%Y-%m-%d')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            payments = self.db.get_payments_report(start_str, end_str)
            total_amount = self.db.get_total_payments_amount(start_str, end_str)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"üìä –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º\n"
            report += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_str} - {end_str}\n\n"
            report += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount / 100:.2f} —Ä—É–±.\n"
            report += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}\n\n"
            
            if payments:
                report += "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n"
                for payment in payments[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    user_info = f"@{payment[7]}" if payment[7] else f"ID:{payment[1]}"
                    amount = payment[3] / 100
                    date = payment[6][:10]
                    report += f"‚Ä¢ {user_info}: {amount:.2f} —Ä—É–±. ({date})\n"
                
                if len(payments) > 10:
                    report += f"\n... –∏ –µ—â–µ {len(payments) - 10} –ø–ª–∞—Ç–µ–∂–µ–π"
            else:
                report += "üì≠ –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            keyboard = [
                [InlineKeyboardButton("üìä –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_report")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(report, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    
    async def admin_users_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_subscriptions = len(self.db.get_expiring_subscriptions(365))  # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
        total_users = len(self.db.get_all_users())
        
        keyboard = [
            [InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users_all")],
            [InlineKeyboardButton("‚úÖ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="users_active")],
            [InlineKeyboardButton("‚ùå –° –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="users_expired")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {active_subscriptions}\n"
            f"‚Ä¢ –° –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {total_users - active_subscriptions}",
            reply_markup=reply_markup
        )
    
    async def users_all_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            users = self.db.get_all_users()
            
            if not users:
                message = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\nüì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]]
            else:
                message = f"üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\nüìä –í—Å–µ–≥–æ: {len(users)}\n\n"
                message += "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                
                for i, user in enumerate(users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                    username = f"@{user[1]}" if user[1] else f"ID:{user[0]}"
                    first_name = user[2] or ""
                    last_name = user[3] or ""
                    name = f"{first_name} {last_name}".strip()
                    if name:
                        message += f"{i}. {username} ({name})\n"
                    else:
                        message += f"{i}. {username}\n"
                
                if len(users) > 20:
                    message += f"\n... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
    
    async def users_active_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            active_users = self.db.get_users_with_active_subscriptions()
            
            if not active_users:
                message = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n\nüì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]]
            else:
                message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n\nüìä –í—Å–µ–≥–æ: {len(active_users)}\n\n"
                message += "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                
                for i, user in enumerate(active_users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                    username = f"@{user[1]}" if user[1] else f"ID:{user[0]}"
                    first_name = user[2] or ""
                    last_name = user[3] or ""
                    name = f"{first_name} {last_name}".strip()
                    expiry_date = user[5][:10] if user[5] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    
                    if name:
                        message += f"{i}. {username} ({name}) - –¥–æ {expiry_date}\n"
                    else:
                        message += f"{i}. {username} - –¥–æ {expiry_date}\n"
                
                if len(active_users) > 20:
                    message += f"\n... –∏ –µ—â–µ {len(active_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
    
    async def users_expired_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            expired_users = self.db.get_users_with_expired_subscriptions()
            
            if not expired_users:
                message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n\nüì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]]
            else:
                message = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n\nüìä –í—Å–µ–≥–æ: {len(expired_users)}\n\n"
                message += "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                
                for i, user in enumerate(expired_users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                    username = f"@{user[1]}" if user[1] else f"ID:{user[0]}"
                    first_name = user[2] or ""
                    last_name = user[3] or ""
                    name = f"{first_name} {last_name}".strip()
                    expiry_date = user[5][:10] if user[5] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    
                    if name:
                        message += f"{i}. {username} ({name}) - –∏—Å—Ç–µ–∫–ª–∞ {expiry_date}\n"
                    else:
                        message += f"{i}. {username} - –∏—Å—Ç–µ–∫–ª–∞ {expiry_date}\n"
                
                if len(expired_users) > 20:
                    message += f"\n... –∏ –µ—â–µ {len(expired_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
    
    async def admin_check_subscriptions_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç
        expiring = self.db.get_expiring_subscriptions(3)
        expired = self.db.get_expired_subscriptions()
        
        message = f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
        message += f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è: {len(expiring)}\n"
        message += f"‚ùå –£–∂–µ –∏—Å—Ç–µ–∫–ª–∏: {len(expired)}\n\n"
        
        if expiring:
            message += "üìã –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            for sub in expiring[:5]:
                username = sub[7] if sub[7] else f"ID:{sub[1]}"
                end_date = sub[5][:10]
                message += f"‚Ä¢ @{username} –¥–æ {end_date}\n"
        
        if expired:
            message += "\nüìã –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            for sub in expired[:5]:
                username = sub[7] if sub[7] else f"ID:{sub[1]}"
                end_date = sub[5][:10]
                message += f"‚Ä¢ @{username} —Å {end_date}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_check_subscriptions")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def admin_back_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º", callback_data="admin_report")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_check_subscriptions")],
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="admin_manage_admins")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ñ–µ–Ω—Å–∫–æ–≥–æ –∫–ª—É–±–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def admin_manage_admins_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.bot.admin_auth.can_manage_admins(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.")
            return
        
        try:
            admins = self.bot.admin_auth.get_all_admins()
            
            message = "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
            message += f"üìä –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}\n\n"
            
            if admins:
                message += "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
                for i, admin in enumerate(admins, 1):
                    username = f"@{admin[1]}" if admin[1] else f"ID:{admin[0]}"
                    first_name = admin[2] or ""
                    last_name = admin[3] or ""
                    name = f"{first_name} {last_name}".strip()
                    role = admin[4] or "admin"
                    added_date = admin[6][:10] if admin[6] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    
                    if name:
                        message += f"{i}. {username} ({name}) - {role} (—Å {added_date})\n"
                    else:
                        message += f"{i}. {username} - {role} (—Å {added_date})\n"
            else:
                message += "üì≠ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_admin")],
                [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_remove_admin")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}")
    
    async def admin_add_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.bot.admin_auth.can_manage_admins(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['waiting_for_admin_id'] = True
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage_admins")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –ø–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç—É @userinfobot",
            reply_markup=reply_markup
        )
    
    async def admin_remove_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.bot.admin_auth.can_manage_admins(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        try:
            admins = self.bot.admin_auth.get_all_admins()
            
            if not admins:
                await query.edit_message_text("üì≠ –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            keyboard = []
            for admin in admins[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                username = f"@{admin[1]}" if admin[1] else f"ID:{admin[0]}"
                first_name = admin[2] or ""
                last_name = admin[3] or ""
                name = f"{first_name} {last_name}".strip()
                role = admin[4] or "admin"
                
                if name:
                    button_text = f"‚ùå {username} ({name}) - {role}"
                else:
                    button_text = f"‚ùå {username} - {role}"
                
                keyboard.append([InlineKeyboardButton(
                    button_text, 
                    callback_data=f"remove_admin_{admin[0]}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}")
    
    async def remove_admin_confirm_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        admin_to_remove = int(query.data.replace("remove_admin_", ""))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.bot.admin_auth.can_manage_admins(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
            admin_info = self.bot.admin_auth.get_admin_info(admin_to_remove)
            if not admin_info:
                await query.edit_message_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            username = f"@{admin_info[1]}" if admin_info[1] else f"ID:{admin_info[0]}"
            first_name = admin_info[2] or ""
            last_name = admin_info[3] or ""
            name = f"{first_name} {last_name}".strip()
            role = admin_info[4] or "admin"
            
            # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            success = self.bot.admin_auth.remove_admin(admin_to_remove, user_id)
            
            if success:
                if name:
                    message = f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username} ({name}) - {role} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
                else:
                    message = f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username} - {role} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
            
            keyboard = [[InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="admin_manage_admins")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")
    
    def setup_admin_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        # –û—Ç—á–µ—Ç—ã
        application.add_handler(CallbackQueryHandler(self.admin_report_callback, pattern="^admin_report$"))
        application.add_handler(CallbackQueryHandler(lambda u, c: self.generate_report(u, c, 7), pattern="^report_7days$"))
        application.add_handler(CallbackQueryHandler(lambda u, c: self.generate_report(u, c, 30), pattern="^report_30days$"))
        application.add_handler(CallbackQueryHandler(lambda u, c: self.generate_report(u, c, 90), pattern="^report_90days$"))
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        application.add_handler(CallbackQueryHandler(self.admin_users_callback, pattern="^admin_users$"))
        application.add_handler(CallbackQueryHandler(self.users_all_callback, pattern="^users_all$"))
        application.add_handler(CallbackQueryHandler(self.users_active_callback, pattern="^users_active$"))
        application.add_handler(CallbackQueryHandler(self.users_expired_callback, pattern="^users_expired$"))
        application.add_handler(CallbackQueryHandler(self.admin_check_subscriptions_callback, pattern="^admin_check_subscriptions$"))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
        application.add_handler(CallbackQueryHandler(self.admin_manage_admins_callback, pattern="^admin_manage_admins$"))
        application.add_handler(CallbackQueryHandler(self.admin_add_admin_callback, pattern="^admin_add_admin$"))
        application.add_handler(CallbackQueryHandler(self.admin_remove_admin_callback, pattern="^admin_remove_admin$"))
        application.add_handler(CallbackQueryHandler(self.remove_admin_confirm_callback, pattern="^remove_admin_"))
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        application.add_handler(CallbackQueryHandler(self.admin_back_callback, pattern="^admin_back$"))
