import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode
from database import Database
from config import ADMIN_CHAT_ID

class AdminPanel:
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.db = Database()
    
    async def admin_report_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="report_7days")],
            [InlineKeyboardButton("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="report_30days")],
            [InlineKeyboardButton("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π", callback_data="report_90days")],
            [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="report_custom")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=reply_markup
        )
    
    async def generate_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE, days: int = None, start_date: str = None, end_date: str = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            if days:
                end_date = datetime.now()
                start_date = end_date - timedelta(days=days)
            else:
                start_date = datetime.strptime(start_date, '%Y-%m-%d')
                end_date = datetime.strptime(end_date, '%Y-%m-%d')
            
            start_str = start_date.strftime('%Y-%m-%d')
            end_str = end_date.strftime('%Y-%m-%d')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            payments = self.db.get_payments_report(start_str, end_str)
            total_amount = self.db.get_total_payments_amount(start_str, end_str)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"üìä –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º\n"
            report += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_str} - {end_str}\n\n"
            report += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount / 100:.2f} —Ä—É–±.\n"
            report += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}\n\n"
            
            if payments:
                report += "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n"
                for payment in payments[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    user_info = f"@{payment[7]}" if payment[7] else f"ID:{payment[1]}"
                    amount = payment[3] / 100
                    date = payment[6][:10]
                    report += f"‚Ä¢ {user_info}: {amount:.2f} —Ä—É–±. ({date})\n"
                
                if len(payments) > 10:
                    report += f"\n... –∏ –µ—â–µ {len(payments) - 10} –ø–ª–∞—Ç–µ–∂–µ–π"
            else:
                report += "üì≠ –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            keyboard = [
                [InlineKeyboardButton("üìä –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_report")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(report, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    
    async def admin_users_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_subscriptions = len(self.db.get_expiring_subscriptions(365))  # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
        total_users = len(self.db.get_all_users())
        
        keyboard = [
            [InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users_all")],
            [InlineKeyboardButton("‚úÖ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="users_active")],
            [InlineKeyboardButton("‚ùå –° –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="users_expired")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {active_subscriptions}\n"
            f"‚Ä¢ –° –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: {total_users - active_subscriptions}",
            reply_markup=reply_markup
        )
    
    async def admin_check_subscriptions_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç
        expiring = self.db.get_expiring_subscriptions(3)
        expired = self.db.get_expired_subscriptions()
        
        message = f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
        message += f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è: {len(expiring)}\n"
        message += f"‚ùå –£–∂–µ –∏—Å—Ç–µ–∫–ª–∏: {len(expired)}\n\n"
        
        if expiring:
            message += "üìã –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            for sub in expiring[:5]:
                username = sub[7] if sub[7] else f"ID:{sub[1]}"
                end_date = sub[5][:10]
                message += f"‚Ä¢ @{username} –¥–æ {end_date}\n"
        
        if expired:
            message += "\nüìã –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            for sub in expired[:5]:
                username = sub[7] if sub[7] else f"ID:{sub[1]}"
                end_date = sub[5][:10]
                message += f"‚Ä¢ @{username} —Å {end_date}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_check_subscriptions")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def admin_back_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º", callback_data="admin_report")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_check_subscriptions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ñ–µ–Ω—Å–∫–æ–≥–æ –∫–ª—É–±–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    def setup_admin_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        # –û—Ç—á–µ—Ç—ã
        application.add_handler(CallbackQueryHandler(self.admin_report_callback, pattern="^admin_report$"))
        application.add_handler(CallbackQueryHandler(lambda u, c: self.generate_report(u, c, 7), pattern="^report_7days$"))
        application.add_handler(CallbackQueryHandler(lambda u, c: self.generate_report(u, c, 30), pattern="^report_30days$"))
        application.add_handler(CallbackQueryHandler(lambda u, c: self.generate_report(u, c, 90), pattern="^report_90days$"))
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        application.add_handler(CallbackQueryHandler(self.admin_users_callback, pattern="^admin_users$"))
        application.add_handler(CallbackQueryHandler(self.admin_check_subscriptions_callback, pattern="^admin_check_subscriptions$"))
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        application.add_handler(CallbackQueryHandler(self.admin_back_callback, pattern="^admin_back$"))
