#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Smart Sender API
"""

import requests
import json
import os
from typing import Dict, Optional, List
from datetime import datetime

class SmartSenderAPI:
    def __init__(self, api_key: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Smart Sender API
        
        Args:
            api_key: API –∫–ª—é—á Smart Sender (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        """
        self.api_key = api_key or os.getenv('SMART_SENDER_API_KEY')
        self.base_url = "https://api.smartsender.io"
        self.headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Smart Sender API"""
        try:
            url = f"{self.base_url}/v1/contacts"
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Smart Sender API —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Smart Sender API: {e}")
            return False
    
    def create_contact(self, phone: str, name: str = None, email: str = None, custom_fields: Dict = None) -> Optional[Dict]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Smart Sender
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            name: –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            email: Email –∫–æ–Ω—Ç–∞–∫—Ç–∞
            custom_fields: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            url = f"{self.base_url}/v1/contacts"
            
            data = {
                'phone': phone,
                'name': name,
                'email': email,
                'customFields': custom_fields or {}
            }
            
            response = requests.post(url, json=data, headers=self.headers, timeout=10)
            
            if response.status_code == 201:
                result = response.json()
                print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: {result.get('id')}")
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return None
    
    def send_message(self, contact_id: str, message: str, message_type: str = "text") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç—É
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (text, image, etc.)
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = f"{self.base_url}/v1/contacts/{contact_id}/messages"
            
            data = {
                'type': message_type,
                'content': message
            }
            
            response = requests.post(url, json=data, headers=self.headers, timeout=10)
            
            if response.status_code == 201:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç—É {contact_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def add_to_sequence(self, contact_id: str, sequence_id: str) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
            sequence_id: ID –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        """
        try:
            url = f"{self.base_url}/v1/sequences/{sequence_id}/contacts"
            
            data = {
                'contactId': contact_id
            }
            
            response = requests.post(url, json=data, headers=self.headers, timeout=10)
            
            if response.status_code == 201:
                print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {contact_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {sequence_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {e}")
            return False
    
    def get_contact(self, contact_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            url = f"{self.base_url}/v1/contacts/{contact_id}"
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return None
    
    def update_contact(self, contact_id: str, update_data: Dict) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
            update_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = f"{self.base_url}/v1/contacts/{contact_id}"
            response = requests.put(url, json=update_data, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {contact_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return False

def test_smart_sender_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Smart Sender"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Smart Sender...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
    api = SmartSenderAPI()
    
    if not api.api_key:
        print("‚ùå SMART_SENDER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print(f"API Key: {'*' * 20}...{api.api_key[-4:]}")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not api.test_connection():
        return False
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    test_contact = api.create_contact(
        phone="+79123456789",
        name="Test User",
        email="test@example.com",
        custom_fields={
            "telegram_id": "12345",
            "subscription_status": "active"
        }
    )
    
    if not test_contact:
        return False
    
    contact_id = test_contact.get('id')
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not api.send_message(contact_id, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"):
        return False
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if not api.update_contact(contact_id, {
        "customFields": {
            "telegram_id": "12345",
            "subscription_status": "expired",
            "last_payment": datetime.now().isoformat()
        }
    }):
        return False
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã Smart Sender –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    test_smart_sender_integration()
