#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π Prodamus –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import time
from datetime import datetime

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        shop_id = os.getenv('PRODAMUS_SHOP_ID', 'dashastar')
        secret_key = os.getenv('PRODAMUS_SECRET_KEY', 'b2f9e8a399225271521dfe88a277a7371cb8c2cebfeaa6f0276ba81fcc303c93')
        demo_mode = os.getenv('PRODAMUS_DEMO_MODE', 'true').lower() == 'true'
        
        print(f"   - Shop ID: {shop_id}")
        print(f"   - Secret Key: {'*' * 20}...{secret_key[-4:] if secret_key else 'Not set'}")
        print(f"   - Demo Mode: {demo_mode}")
        
        if shop_id and secret_key:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_prodamus_api():
    """–¢–µ—Å—Ç API Prodamus"""
    print("\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Prodamus...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å API
        from prodamus import Prod–∞musAPI
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        api = Prod–∞musAPI()
        
        print(f"   - Shop ID: {api.shop_id}")
        print(f"   - Demo Mode: {api.demo_mode}")
        print(f"   - API URL: {api.api_url}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏
        test_data = "test_string"
        signature = api.generate_signature(test_data)
        
        if signature:
            print("‚úÖ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   - –ü–æ–¥–ø–∏—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {'*' * 20}...{signature[-4:]}")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False

def test_webhook_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é webhook
        webhook_url = os.getenv('WEBHOOK_URL', 'https://--help/webhook/prodamus')
        flask_host = os.getenv('FLASK_HOST', '0.0.0.0')
        flask_port = int(os.getenv('FLASK_PORT', '5000'))
        
        print(f"   - Webhook URL: {webhook_url}")
        print(f"   - Flask Host: {flask_host}")
        print(f"   - Flask Port: {flask_port}")
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è webhook –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook: {e}")
        return False

def test_demo_cards():
    """–¢–µ—Å—Ç –¥–µ–º–æ-–∫–∞—Ä—Ç"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞...")
    
    demo_cards = [
        {"name": "–ú–ò–†", "number": "2202 2050 0001 2424", "expiry": "05/35", "cvc": "669"},
        {"name": "MasterCard", "number": "5469 9801 0004 8525", "expiry": "05/26", "cvc": "041"},
        {"name": "Visa", "number": "4006 8009 0096 2514", "expiry": "05/26", "cvc": "941"},
        {"name": "–ú–æ–Ω–µ—Ç–∞", "number": "2200 2400 0000 0006", "expiry": "12/24", "cvc": "123"},
        {"name": "–ì–∞–∑–ø—Ä–æ–º–ë–∞–Ω–∫", "number": "4242 4242 4242 4242", "expiry": "12/30", "cvc": "123"}
    ]
    
    print("‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:")
    for card in demo_cards:
        print(f"   üì± {card['name']}: {card['number']} ({card['expiry']}, CVC: {card['cvc']})")
    
    return True

def test_smart_sender():
    """–¢–µ—Å—Ç Smart Sender"""
    print("\nüìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Sender...")
    
    try:
        api_key = os.getenv('SMART_SENDER_API_KEY')
        
        if api_key:
            print(f"   - API Key: {'*' * 20}...{api_key[-4:]}")
            print("‚úÖ Smart Sender API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        else:
            print("‚ö†Ô∏è SMART_SENDER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("   –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Smart Sender: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –£–ü–†–û–©–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–õ–ê–¢–ï–ñ–ï–ô PRODAMUS")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Python: {sys.version}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("API Prodamus", test_prodamus_api),
        ("Webhook", test_webhook_config),
        ("–î–µ–º–æ-–∫–∞—Ä—Ç—ã", test_demo_cards),
        ("Smart Sender", test_smart_sender)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìù –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: python install_dependencies.py")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ webhook —Å–µ—Ä–≤–µ—Ä: python webhook.py")
        print("   3. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–ª–∞—Ç—É —Å –¥–µ–º–æ-–∫–∞—Ä—Ç–∞–º–∏")
    else:
        print(f"\n‚ö†Ô∏è {len(results) - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ config.py")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: python install_dependencies.py")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
