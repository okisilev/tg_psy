#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ —Å webhook —Å–µ—Ä–≤–µ—Ä–æ–º –∏ PageKite
"""

import asyncio
import logging
import signal
import sys
import time
import subprocess
import os
from threading import Thread
from bot import WomenClubBot
from webhook import app
from config import FLASK_HOST, FLASK_PORT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class ApplicationManager:
    def __init__(self):
        self.bot = WomenClubBot()
        self.webhook_thread = None
        self.pagekite_process = None
        self.is_running = False
    
    def start_webhook_server(self):
        """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
        logger.info(f"   - Host: {FLASK_HOST}")
        logger.info(f"   - Port: {FLASK_PORT}")
        logger.info(f"   - URL: http://{FLASK_HOST}:{FLASK_PORT}")
        
        try:
            app.run(host=FLASK_HOST, port=FLASK_PORT, debug=False, use_reloader=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def start_pagekite(self):
        """–ó–∞–ø—É—Å–∫ PageKite"""
        logger.info("üåê –ó–∞–ø—É—Å–∫ PageKite...")
        logger.info("   - Domain: dashastar.pagekite.me")
        logger.info("   - Port: 5000")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pagekite.py
            if not os.path.exists('pagekite.py'):
                logger.error("‚ùå –§–∞–π–ª pagekite.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                logger.info("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ pagekite.py...")
                try:
                    import urllib.request
                    urllib.request.urlretrieve('https://pagekite.net/pk/pagekite.py', 'pagekite.py')
                    os.chmod('pagekite.py', 0o755)
                    logger.info("‚úÖ pagekite.py —Å–∫–∞—á–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è pagekite.py: {e}")
                    return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º PageKite
            self.pagekite_process = subprocess.Popen(
                ['./pagekite.py', '5000', 'dashastar.pagekite.me'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            logger.info(f"‚úÖ PageKite –∑–∞–ø—É—â–µ–Ω (PID: {self.pagekite_process.pid})")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PageKite
            try:
                import requests
                response = requests.get("https://dashastar.pagekite.me/health", timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ PageKite —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è PageKite –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å PageKite: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PageKite: {e}")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.stop()
        sys.exit(0)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.is_running = True
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGINT, self.signal_handler)
            signal.signal(signal.SIGTERM, self.signal_handler)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            logger.info("üåê –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
            self.webhook_thread = Thread(target=self.start_webhook_server, daemon=True)
            self.webhook_thread.start()
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook —Å–µ—Ä–≤–µ—Ä
            try:
                import requests
                response = requests.get(f"http://{FLASK_HOST}:{FLASK_PORT}/health", timeout=5)
                if response.status_code == 200:
                    logger.info("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è Webhook —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å webhook —Å–µ—Ä–≤–µ—Ä: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º PageKite
            self.start_pagekite()
            
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            logger.info("   - Webhook —Å–µ—Ä–≤–µ—Ä: http://localhost:5000")
            logger.info("   - PageKite: https://dashastar.pagekite.me")
            logger.info("   - –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            self.bot.run()
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        finally:
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_running:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            self.is_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PageKite
            if self.pagekite_process:
                logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PageKite...")
                try:
                    self.pagekite_process.terminate()
                    self.pagekite_process.wait(timeout=5)
                    logger.info("‚úÖ PageKite –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PageKite: {e}")
                    try:
                        self.pagekite_process.kill()
                        logger.info("‚úÖ PageKite –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e2:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PageKite: {e2}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            try:
                asyncio.run(self.bot.scheduler.stop())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                self.bot.db.close()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 50)
    print("ü§ñ Telegram Bot –¥–ª—è –ñ–µ–Ω—Å–∫–æ–≥–æ –∫–ª—É–±–∞")
    print("üåê –° webhook —Å–µ—Ä–≤–µ—Ä–æ–º –∏ PageKite")
    print("=" * 50)
    
    app_manager = ApplicationManager()
    app_manager.start()

if __name__ == "__main__":
    main()
