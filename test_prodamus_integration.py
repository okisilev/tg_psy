#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Prodamus
"""

import os
import sys
import time
from datetime import datetime, timedelta
from prodamus import Prod–∞musAPI
from config import PRODAMUS_DEMO_MODE, SUBSCRIPTION_PRICE

def test_prodamus_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Prodamus API"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Prodamus...")
    
    try:
        prodamus = Prod–∞musAPI()
        print(f"‚úÖ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   - Shop ID: {prodamus.shop_id}")
        print(f"   - Demo Mode: {prodamus.demo_mode}")
        print(f"   - Secret Key: {'*' * 20}...{prodamus.secret_key[-4:] if prodamus.secret_key else 'Not set'}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
        return False

def test_payment_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    print("\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...")
    
    try:
        prodamus = Prod–∞musAPI()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_user_id = 12345
        test_username = "test_user"
        
        print(f"   - User ID: {test_user_id}")
        print(f"   - Username: {test_username}")
        print(f"   - Amount: {SUBSCRIPTION_PRICE} –∫–æ–ø–µ–µ–∫")
        print(f"   - Demo Mode: {prodamus.demo_mode}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        print("   - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Prodamus API...")
        payment_result = prodamus.create_payment(test_user_id, test_username)
        
        if payment_result:
            print("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"   - Payment ID: {payment_result.get('payment_id')}")
            print(f"   - Payment URL: {payment_result.get('payment_url')}")
            print(f"   - Amount: {payment_result.get('amount')} –∫–æ–ø–µ–µ–∫")
            return payment_result
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
            print("   - –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("     ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π Shop ID –∏–ª–∏ Secret Key")
            print("     ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API")
            print("     ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None

def test_payment_status():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞...")
    
    try:
        prodamus = Prod–∞musAPI()
        test_order_id = f"test_order_{int(time.time())}"
        
        print(f"   - Order ID: {test_order_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        status_result = prodamus.get_payment_status(test_order_id)
        
        if status_result:
            print("‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—É—á–µ–Ω!")
            print(f"   - Status: {status_result}")
            return status_result
        else:
            print("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None

def test_api_methods():
    """–¢–µ—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö API –º–µ—Ç–æ–¥–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö API –º–µ—Ç–æ–¥–æ–≤...")
    
    try:
        prodamus = Prod–∞musAPI()
        test_order_id = f"test_subscription_{int(time.time())}"
        
        # –¢–µ—Å—Ç set_activity
        print("   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ set_activity...")
        activity_result = prodamus.set_activity(test_order_id, "active")
        if activity_result:
            print("   ‚úÖ set_activity: —É—Å–ø–µ—à–Ω–æ")
        else:
            print("   ‚ö†Ô∏è set_activity: –Ω–µ —É–¥–∞–ª–æ—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        
        # –¢–µ—Å—Ç set_subscription_payment_date
        print("   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ set_subscription_payment_date...")
        future_date = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
        date_result = prodamus.set_subscription_payment_date(test_order_id, future_date)
        if date_result:
            print(f"   ‚úÖ set_subscription_payment_date: —É—Å–ø–µ—à–Ω–æ (–¥–∞—Ç–∞: {future_date})")
        else:
            print("   ‚ö†Ô∏è set_subscription_payment_date: –Ω–µ —É–¥–∞–ª–æ—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False

def test_demo_mode():
    """–¢–µ—Å—Ç –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞...")
    
    print(f"   - Demo Mode –≤–∫–ª—é—á–µ–Ω: {PRODAMUS_DEMO_MODE}")
    
    if PRODAMUS_DEMO_MODE:
        print("‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:")
        print("   üì± –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –°–±–µ—Ä–±–∞–Ω–∫–∞:")
        print("      –ú–ò–†: 2202 2050 0001 2424 (05/35, CVC: 669)")
        print("      MasterCard: 5469 9801 0004 8525 (05/26, CVC: 041)")
        print("      Visa: 4006 8009 0096 2514 (05/26, CVC: 941)")
        print("   üì± –î—Ä—É–≥–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:")
        print("      –ú–æ–Ω–µ—Ç–∞: 2200 2400 0000 0006 (12/24, CVC: 123)")
        print("      –ì–∞–∑–ø—Ä–æ–º–ë–∞–Ω–∫: 4242 4242 4242 4242 (12/30, CVC: 123)")
    else:
        print("‚ö†Ô∏è –î–µ–º–æ-—Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏!")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Prodamus")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not os.getenv('PRODAMUS_SECRET_KEY'):
        print("‚ùå PRODAMUS_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config.py")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API", test_prodamus_connection),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞", test_payment_creation),
        ("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", test_payment_status),
        ("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API", test_api_methods),
        ("–î–µ–º–æ-—Ä–µ–∂–∏–º", test_demo_mode)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result is not None))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ webhook URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Prodamus")
        print("   2. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–ª–∞—Ç—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ webhook")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

if __name__ == "__main__":
    main()
