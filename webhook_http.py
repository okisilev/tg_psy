#!/usr/bin/env python3
"""
HTTP –≤–µ—Ä—Å–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ SSL)
"""

from flask import Flask, request, jsonify
import logging
from datetime import datetime
from database import Database
from prodamus import Prod–∞musAPI
from config import PRODAMUS_SECRET_KEY, FLASK_HOST, FLASK_PORT

app = Flask(__name__)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
prodamus = Prod–∞musAPI()

@app.route('/webhook/prodamus', methods=['POST'])
@app.route('/sales/prodamus', methods=['POST'])  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Prodamus
def prodamus_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç –ü—Ä–æ–¥–∞–º—É—Å"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ü—Ä–æ–¥–∞–º—É—Å
        data = request.get_json()
        
        if not data:
            logger.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç webhook")
            return jsonify({'status': 'error', 'message': 'Empty data'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        signature = request.headers.get('X-Signature')
        if not signature:
            signature = request.headers.get('Sign')  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Prodamus: {data}")
        logger.info(f"–ü–æ–¥–ø–∏—Å—å: {signature}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if signature and not prodamus.verify_webhook(data, signature):
            logger.error("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            return jsonify({'status': 'error', 'message': 'Invalid signature'}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        order_id = data.get('order_id')
        payment_status = data.get('payment_status')
        amount = float(data.get('sum', 0)) * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: order_id={order_id}, status={payment_status}, amount={amount}")
        
        if payment_status == 'success':
            # –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            handle_successful_payment(order_id, int(amount), data)
            return jsonify({'status': 'success', 'message': 'Payment processed'})
        else:
            # –ù–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            logger.info(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ —É—Å–ø–µ—à–µ–Ω: {payment_status}")
            return jsonify({'status': 'info', 'message': 'Payment not successful'})
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

def handle_successful_payment(order_id: str, amount: int, webhook_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ order_id (—Ñ–æ—Ä–º–∞—Ç: women_club_{user_id}_{timestamp})
        if order_id.startswith('women_club_'):
            user_id_str = order_id.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º user_id
            user_id = int(user_id_str)
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
            user_id = webhook_data.get('customer_extra', {}).get('user_id')
            if not user_id:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ order_id: {order_id}")
                return
        
        username = webhook_data.get('customer_email', '').split('@')[0] if webhook_data.get('customer_email') else ''
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: user_id={user_id}, order_id={order_id}, amount={amount}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.add_payment(user_id, order_id, amount, 'success')

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        db.create_subscription(user_id, order_id, amount)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = db.get_user(user_id)
        subscription = db.get_active_subscription(user_id)

        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        try:
            import asyncio
            from bot import WomenClubBot

            bot = WomenClubBot()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –Ω–æ–≤–æ–º event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            try:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
                loop.run_until_complete(bot.activate_subscription(user_id, order_id, amount))
                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            finally:
                loop.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'ok',
        'timestamp': datetime.now().isoformat(),
        'service': 'webhook-server'
    })

@app.route('/test', methods=['GET', 'POST'])
def test_endpoint():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint"""
    if request.method == 'GET':
        return jsonify({
            'message': 'Webhook server is running',
            'timestamp': datetime.now().isoformat(),
            'method': 'GET'
        })
    else:
        data = request.get_json() or {}
        return jsonify({
            'message': 'Webhook server received data',
            'timestamp': datetime.now().isoformat(),
            'method': 'POST',
            'data': data
        })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ HTTP webhook —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ SSL)")
    print(f"üåê URL: http://{FLASK_HOST}:{FLASK_PORT}")
    print(f"üì° Webhook: http://{FLASK_HOST}:{FLASK_PORT}/webhook/prodamus")
    print(f"üì° Sales: http://{FLASK_HOST}:{FLASK_PORT}/sales/prodamus")
    print(f"‚ù§Ô∏è Health: http://{FLASK_HOST}:{FLASK_PORT}/health")
    print(f"üß™ Test: http://{FLASK_HOST}:{FLASK_PORT}/test")
    print()
    print("‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
    print("   –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ HTTPS —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º")
    print()
    
    app.run(host=FLASK_HOST, port=FLASK_PORT, debug=True)
