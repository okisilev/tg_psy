#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook Prodamus
"""

import requests
import json
import hmac
import hashlib
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEBHOOK_URL = "http://localhost:5000/webhook/prodamus"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
SECRET_KEY = "b2f9e8a399225271521dfe88a277a7371cb8c2cebfeaa6f0276ba81fcc303c93"

def generate_signature(data: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è webhook"""
    return hmac.new(
        SECRET_KEY.encode('utf-8'),
        data.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()

def test_successful_payment_webhook():
    """–¢–µ—Å—Ç webhook –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    webhook_data = {
        "shop_id": "test_shop",
        "order_id": f"test_success_{int(time.time())}",
        "amount": 1500,
        "currency": "RUB",
        "status": "success",
        "custom_fields": {
            "user_id": "12345",
            "username": "test_user"
        },
        "payment_date": datetime.now().isoformat()
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    sign_data = f"{webhook_data['shop_id']}{webhook_data['amount']}{webhook_data['order_id']}{webhook_data['currency']}{webhook_data['status']}{SECRET_KEY}"
    signature = generate_signature(sign_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    headers = {
        'Content-Type': 'application/json',
        'X-Signature': signature
    }
    
    try:
        response = requests.post(WEBHOOK_URL, json=webhook_data, headers=headers, timeout=10)
        
        print(f"   Status Code: {response.status_code}")
        print(f"   Response: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")
        return False

def test_failed_payment_webhook():
    """–¢–µ—Å—Ç webhook –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    webhook_data = {
        "shop_id": "test_shop",
        "order_id": f"test_failed_{int(time.time())}",
        "amount": 1500,
        "currency": "RUB",
        "status": "failed",
        "custom_fields": {
            "user_id": "12346",
            "username": "test_user_failed"
        },
        "payment_date": datetime.now().isoformat()
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    sign_data = f"{webhook_data['shop_id']}{webhook_data['amount']}{webhook_data['order_id']}{webhook_data['currency']}{webhook_data['status']}{SECRET_KEY}"
    signature = generate_signature(sign_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    headers = {
        'Content-Type': 'application/json',
        'X-Signature': signature
    }
    
    try:
        response = requests.post(WEBHOOK_URL, json=webhook_data, headers=headers, timeout=10)
        
        print(f"   Status Code: {response.status_code}")
        print(f"   Response: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")
        return False

def test_invalid_signature():
    """–¢–µ—Å—Ç webhook —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    webhook_data = {
        "shop_id": "test_shop",
        "order_id": f"test_invalid_{int(time.time())}",
        "amount": 1500,
        "currency": "RUB",
        "status": "success",
        "custom_fields": {
            "user_id": "12347",
            "username": "test_user_invalid"
        }
    }
    
    # –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
    signature = "invalid_signature"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    headers = {
        'Content-Type': 'application/json',
        'X-Signature': signature
    }
    
    try:
        response = requests.post(WEBHOOK_URL, json=webhook_data, headers=headers, timeout=10)
        
        print(f"   Status Code: {response.status_code}")
        print(f"   Response: {response.text}")
        
        if response.status_code == 400:
            print("‚úÖ Webhook –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–µ–≤–µ—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å—å!")
            return True
        else:
            print("‚ùå Webhook –Ω–µ –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–µ–≤–µ—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")
        return False

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    
    try:
        health_url = WEBHOOK_URL.replace('/webhook/prodamus', '/health')
        response = requests.get(health_url, timeout=10)
        
        print(f"   Status Code: {response.status_code}")
        print(f"   Response: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook Prodamus")
    print("=" * 50)
    print(f"Webhook URL: {WEBHOOK_URL}")
    print(f"Secret Key: {'*' * 20}...{SECRET_KEY[-4:]}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("Health Check", test_health_check),
        ("–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂", test_successful_payment_webhook),
        ("–ù–µ—É–¥–∞—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂", test_failed_payment_webhook),
        ("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", test_invalid_signature)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø WEBHOOK:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã webhook –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã webhook –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        print("\nüìù –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("   2. –ù–µ–≤–µ—Ä–Ω—ã–π URL webhook")
        print("   3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

if __name__ == "__main__":
    main()
