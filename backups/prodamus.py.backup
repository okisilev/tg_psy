import requests
import hashlib
import hmac
import json
import time
from typing import Dict, Optional
from config import (
    PRODAMUS_SHOP_ID, 
    PRODAMUS_SECRET_KEY, 
    PRODAMUS_API_URL,
    PRODAMUS_DEMO_MODE,
    PRODAMUS_WEBHOOK_URL,
    SUBSCRIPTION_PRICE
)

class Prod–∞musAPI:
    def __init__(self):
        self.shop_id = PRODAMUS_SHOP_ID
        self.secret_key = PRODAMUS_SECRET_KEY
        self.api_url = PRODAMUS_API_URL
        self.demo_mode = PRODAMUS_DEMO_MODE
    
    def generate_signature(self, data: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ü—Ä–æ–¥–∞–º—É—Å"""
        return hmac.new(
            self.secret_key.encode('utf-8'),
            data.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def create_payment(self, order_id: str, amount: int, description: str, user_id: int, phone: str = None, email: str = None) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ü—Ä–æ–¥–∞–º—É—Å"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL
            params = {
                'shop_id': self.shop_id,
                'amount': amount,
                'currency': 'RUB',
                'order_id': order_id,
                'customer_phone': phone or '',
                'customer_email': email or '',
                'description': description,
                'success_url': 'https://t.me/your_bot_username',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username –±–æ—Ç–∞
                'fail_url': 'https://t.me/your_bot_username',     # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username –±–æ—Ç–∞
                'callback_url': PRODAMUS_WEBHOOK_URL,  # URL –¥–ª—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                'custom_fields': f'user_id:{user_id}'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if self.demo_mode:
                params['demo_mode'] = 1
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            sign_string = f"{params['shop_id']}{params['amount']}{params['order_id']}{params['currency']}{self.secret_key}"
            params['signature'] = self.generate_signature(sign_string)
            
            print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            print(f"Order ID: {order_id}")
            print(f"Amount: {SUBSCRIPTION_PRICE} –∫–æ–ø–µ–µ–∫")
            print(f"Demo Mode: {self.demo_mode}")
            
            # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            base_url = "https://dashastar.payform.ru/"
            payment_url = base_url + "?" + "&".join([f"{k}={v}" for k, v in params.items() if v])
            
            print(f"Payment URL: {payment_url}")
            
            return {
                'payment_id': order_id,
                'payment_url': payment_url,
                'amount': SUBSCRIPTION_PRICE
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
    
    def verify_webhook(self, data: Dict, signature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç –ü—Ä–æ–¥–∞–º—É—Å"""
        try:
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:")
            print(f"  –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {signature}")
            print(f"  –î–∞–Ω–Ω—ã–µ: {data}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏
            variants = [
                # –í–∞—Ä–∏–∞–Ω—Ç 1: shop_id + order_id + sum + currency + payment_status + secret_key
                f"{self.shop_id}{data.get('order_id', '')}{data.get('sum', '')}{data.get('currency', '')}{data.get('payment_status', '')}{self.secret_key}",
                
                # –í–∞—Ä–∏–∞–Ω—Ç 2: order_id + sum + currency + payment_status + secret_key
                f"{data.get('order_id', '')}{data.get('sum', '')}{data.get('currency', '')}{data.get('payment_status', '')}{self.secret_key}",
                
                # –í–∞—Ä–∏–∞–Ω—Ç 3: order_id + sum + payment_status + secret_key
                f"{data.get('order_id', '')}{data.get('sum', '')}{data.get('payment_status', '')}{self.secret_key}",
                
                # –í–∞—Ä–∏–∞–Ω—Ç 4: sum + payment_status + secret_key
                f"{data.get('sum', '')}{data.get('payment_status', '')}{self.secret_key}",
                
                # –í–∞—Ä–∏–∞–Ω—Ç 5: order_id + payment_status + secret_key
                f"{data.get('order_id', '')}{data.get('payment_status', '')}{self.secret_key}",
                
                # –í–∞—Ä–∏–∞–Ω—Ç 6: —Ç–æ–ª—å–∫–æ order_id + secret_key
                f"{data.get('order_id', '')}{self.secret_key}",
                
                # –í–∞—Ä–∏–∞–Ω—Ç 7: —Ç–æ–ª—å–∫–æ sum + secret_key
                f"{data.get('sum', '')}{self.secret_key}",
                
                # –í–∞—Ä–∏–∞–Ω—Ç 8: —Ç–æ–ª—å–∫–æ payment_status + secret_key
                f"{data.get('payment_status', '')}{self.secret_key}",
                
                # –í–∞—Ä–∏–∞–Ω—Ç 9: –≤—Å–µ –ø–æ–ª—è –±–µ–∑ shop_id
                f"{data.get('order_id', '')}{data.get('sum', '')}{data.get('currency', '')}{data.get('payment_status', '')}{data.get('customer_email', '')}{self.secret_key}",
                
                # –í–∞—Ä–∏–∞–Ω—Ç 10: –≤—Å–µ –ø–æ–ª—è —Å shop_id
                f"{self.shop_id}{data.get('order_id', '')}{data.get('sum', '')}{data.get('currency', '')}{data.get('payment_status', '')}{data.get('customer_email', '')}{self.secret_key}"
            ]
            
            for i, variant_data in enumerate(variants, 1):
                expected_signature = self.generate_signature(variant_data)
                print(f"  –í–∞—Ä–∏–∞–Ω—Ç {i}: {variant_data}")
                print(f"  –ü–æ–¥–ø–∏—Å—å {i}: {expected_signature}")
                
                if hmac.compare_digest(signature, expected_signature):
                    print(f"  ‚úÖ –ü–æ–¥–ø–∏—Å—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º {i}")
                    return True
            
            print("  ‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∏ —Å –æ–¥–Ω–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º")
            return False

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
            return False
    
    def get_payment_status(self, order_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ API Prodamus"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API Prodamus –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            url = f"https://api.prodamus.ru/v3/payments/{order_id}"
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            sign_data = f"{self.shop_id}{order_id}{self.secret_key}"
            signature = self.generate_signature(sign_data)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            headers = {
                'Authorization': f'Bearer {signature}',
                'Content-Type': 'application/json',
                'X-Shop-Id': self.shop_id
            }
            
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API Prodamus:")
            print(f"   - URL: {url}")
            print(f"   - Order ID: {order_id}")
            print(f"   - Shop ID: {self.shop_id}")
            print(f"   - Signature: {signature}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, headers=headers, timeout=30)
            
            print(f"   - Response status: {response.status_code}")
            print(f"   - Response text: {response.text}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"   - API Response: {data}")
                    return data
                except ValueError:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                    print(f"   - –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
                    return None
            elif response.status_code == 404:
                print(f"   - –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: {order_id}")
                return None
            else:
                print(f"   - –û—à–∏–±–∫–∞ API: {response.status_code}")
                return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
    
    def set_activity(self, order_id: str, activity: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ (setactivity API)"""
        try:
            url = "https://secure.payform.ru/setactivity"
            data = {
                'shop_id': self.shop_id,
                'order_id': order_id,
                'activity': activity,
                'signature': self.generate_signature(f"{self.shop_id}{order_id}{activity}{self.secret_key}")
            }
            
            response = requests.post(url, json=data, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                return result.get('status') == 'success'
            
            return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def set_subscription_payment_date(self, order_id: str, payment_date: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (setsubscriptionpaymentdate API)"""
        try:
            url = "https://secure.payform.ru/setsubscriptionpaymentdate"
            data = {
                'shop_id': self.shop_id,
                'order_id': order_id,
                'payment_date': payment_date,
                'signature': self.generate_signature(f"{self.shop_id}{order_id}{payment_date}{self.secret_key}")
            }
            
            response = requests.post(url, json=data, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                return result.get('status') == 'success'
            
            return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
