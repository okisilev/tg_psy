#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ Prodamus
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import Database
from prodamus import Prod–∞musAPI

class ProdamusAlternative:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Prodamus"""
    
    def __init__(self):
        self.db = Database()
        self.prodamus = Prod–∞musAPI()
    
    def get_payment_status(self, order_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥"""
        try:
            print(f"üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {order_id}")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (webhook –º–æ–≥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å)
            cursor = self.db.conn.cursor()
            cursor.execute('''
                SELECT user_id, payment_id, amount, status, created_at
                FROM payments 
                WHERE payment_id = ?
            ''', (order_id,))
            
            result = cursor.fetchone()
            
            if result:
                user_id, payment_id, amount, status, created_at = result
                print(f"   ‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: status={status}")
                return {
                    'status': status,
                    'amount': amount,
                    'user_id': user_id,
                    'created_at': created_at,
                    'source': 'database'
                }
            
            # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º API Prodamus
            print(f"   üîç –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º API Prodamus...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            api_endpoints = [
                f"https://api.prodamus.ru/v3/payments/{order_id}",
                f"https://secure.payform.ru/status?shop_id={self.prodamus.shop_id}&order_id={order_id}",
                f"https://dashastar.payform.ru/status?order_id={order_id}"
            ]
            
            for url in api_endpoints:
                try:
                    print(f"   üîç –ü—Ä–æ–±—É–µ–º API: {url}")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
                    sign_data = f"{self.prodamus.shop_id}{order_id}{self.prodamus.secret_key}"
                    signature = self.prodamus.generate_signature(sign_data)
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = {
                        'Authorization': f'Bearer {signature}',
                        'Content-Type': 'application/json',
                        'X-Shop-Id': self.prodamus.shop_id
                    }
                    
                    # –ó–∞–ø—Ä–æ—Å
                    import requests
                    response = requests.get(url, headers=headers, timeout=10)
                    
                    print(f"   - Response: {response.status_code}")
                    
                    if response.status_code == 200:
                        data = response.json()
                        print(f"   ‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {data}")
                        return data
                    elif response.status_code == 404:
                        print(f"   ‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: {order_id}")
                        continue
                    else:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status_code}")
                        continue
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {e}")
                    continue
            
            # 3. –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            print(f"   ‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –±–∞–∑–µ, –Ω–∏ –≤ API")
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return None
    
    def simulate_webhook_payment(self, order_id: str, user_id: int, amount: int):
        """–°–∏–º—É–ª—è—Ü–∏—è webhook –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            print(f"üß™ –°–∏–º—É–ª—è—Ü–∏—è webhook –ø–ª–∞—Ç–µ–∂–∞: {order_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db.add_payment(user_id, order_id, amount, 'success')
            print(f"   ‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            self.db.create_subscription(user_id, order_id, amount)
            print(f"   ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            return False

def test_alternative_approach():
    """–¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""
    
    print("üß™ –¢–ï–°–¢ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ì–û –ü–û–î–•–û–î–ê")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    prodamus_alt = ProdamusAlternative()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_payment_id = "women_club_431292182_test"
    test_user_id = 431292182
    test_amount = 5000
    
    print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   - Payment ID: {test_payment_id}")
    print(f"   - User ID: {test_user_id}")
    print(f"   - Amount: {test_amount}")
    print()
    
    # –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è webhook –ø–ª–∞—Ç–µ–∂–∞
    print("üìã –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è webhook –ø–ª–∞—Ç–µ–∂–∞")
    print("-" * 40)
    
    success = prodamus_alt.simulate_webhook_payment(test_payment_id, test_user_id, test_amount)
    
    if success:
        print("   ‚úÖ Webhook –ø–ª–∞—Ç–µ–∂ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ webhook")
    
    print()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    print("üìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞")
    print("-" * 40)
    
    payment_status = prodamus_alt.get_payment_status(test_payment_id)
    
    if payment_status:
        print("   ‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—É—á–µ–Ω")
        print(f"   - –°—Ç–∞—Ç—É—Å: {payment_status.get('status')}")
        print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫: {payment_status.get('source', 'unknown')}")
        print(f"   - –°—É–º–º–∞: {payment_status.get('amount')}")
        
        if payment_status.get('status') == 'success':
            print("   ‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!")
        else:
            print(f"   ‚ùì –°—Ç–∞—Ç—É—Å: {payment_status.get('status')}")
    else:
        print("   ‚ùå –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    
    print()
    
    # –¢–µ—Å—Ç 3: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üìã –¢–µ—Å—Ç 3: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 40)
    
    try:
        cursor = prodamus_alt.db.conn.cursor()
        cursor.execute('DELETE FROM payments WHERE payment_id = ?', (test_payment_id,))
        cursor.execute('DELETE FROM subscriptions WHERE payment_id = ?', (test_payment_id,))
        prodamus_alt.db.conn.commit()
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    print()
    print("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print()
    print("üìù –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("   ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚úÖ Fallback –Ω–∞ API Prodamus")
    print("   ‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂")

if __name__ == "__main__":
    test_alternative_approach()
